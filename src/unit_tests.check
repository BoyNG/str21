#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "s21_string.h"

#define BUFF_SIZE 512

char array1[100] = {'\0'};
char array2[100] = {'\0'};

void free_array(char *arr1, char *arr2) {
    for (int i = 0; i < 20; i++) {
        arr1[i] = '\0';
        arr2[i] = '\0';
    }
}

#test test_s21_memchr
char str1[100] = "";
char str2[100] = "12345";
char str3[100] = "\0ddddd";
char str4[100] = " 0 z ";
ck_assert_ptr_eq(s21_memchr(str2, 97, 10), memchr(str2, 97, 10));
ck_assert_ptr_eq(s21_memchr(str3, '\0', 6), memchr(str3, '\0', 6));
ck_assert_ptr_eq(s21_memchr(str1, 'z', 15), memchr(str1, 'z', 15));
ck_assert_ptr_eq(s21_memchr(str3, 'd', 4), memchr(str3, 'd', 4));
ck_assert_ptr_eq(s21_memchr(str4, ' ', 4), memchr(str4, ' ', 4));

#test test_s21_memcmp
ck_assert_int_eq(s21_memcmp("123", "123", 5), memcmp("123", "123", 5));
ck_assert_int_eq(s21_memcmp("", "123", 1), memcmp("", "123", 1));
ck_assert_int_eq(s21_memcmp(" 0 z ", "\0dd", 2), memcmp(" 0 z ", "\0dd", 2));
ck_assert_int_eq(s21_memcmp("\0dd", " 0 z ", 1), memcmp("\0dd", " 0 z ", 1));

#test test_s21_memcpy
char str1[100] = "";
char str2[100] = "12345";
char str3[100] = "\0ddddd";
char str4[100] = " 0 z ";
ck_assert_str_eq(s21_memcpy(str1, str2, 5), memcpy(str1, str2, 5));
ck_assert_str_eq(s21_memcpy(str2, str1, 2), memcpy(str2, str1, 2));
ck_assert_str_eq(s21_memcpy(str4, str3, 4), memcpy(str4, str3, 4));
ck_assert_str_eq(s21_memcpy(str3, str4, 2), memcpy(str3, str4, 2));

#test test_s21_memmove
char str1[100] ="";
char str2[100] ="12345";
char str3[100] = "\0ddddd";
char str4[100] = " 0 z ";
ck_assert_str_eq(s21_memmove(str1, str2, 5), memmove(str1, str2, 5));
ck_assert_str_eq(s21_memmove(str2, str1, 2), memmove(str2, str1, 2));
ck_assert_str_eq(s21_memmove(str4, str3, 4), memmove(str4, str3, 4));
ck_assert_str_eq(s21_memmove(str3, str4, 2), memmove(str3, str4, 2));

#test test_s21_memset
char str1[100] ="";
char str2[100] ="12345";
char str3[100] = "\0ddddd";
char str4[100] = " 0 z ";
ck_assert_str_eq(s21_memset(str2, '\0', 10), memset(str2, '\0', 10));
ck_assert_str_eq(s21_memset(str1, '\n', 50), memset(str1, '\n', 50));
ck_assert_str_eq(s21_memset(str4, '1', 1), memset(str4, '1', 1));
ck_assert_str_eq(s21_memset(str3, '0', 20), memset(str3, '0', 20));

#test test_s21_strcat
char str1[100] ="";
char str2[100] ="12345";
char str3[100] = "\0ddddd";
char str4[100] = " 0 z ";
ck_assert_str_eq(s21_strcat(str2, str1), strcat(str2, str1));
ck_assert_str_eq(s21_strcat(str1, str2), strcat(str1, str2));
ck_assert_str_eq(s21_strcat(str4, str3), strcat(str4, str3));
ck_assert_str_eq(s21_strcat(str3, str4), strcat(str3, str4));


#test test_s21_strncat
char str1[100] ="";
char str2[100] ="12345";
char str3[100] = "\0ddddd";
char str4[100] = " 0 z ";
ck_assert_str_eq(s21_strncat(str2, str1, 5), strncat(str2, str1, 5));
ck_assert_str_eq(s21_strncat(str1, str2, 5), strncat(str1, str2, 5));
ck_assert_str_eq(s21_strncat(str4, str3, 10), strncat(str4, str3, 10));
ck_assert_str_eq(s21_strncat(str3, str4, 0), strncat(str3, str4, 0));

#test test_s21_strchr
char str1[100] ="";
char str2[100] ="12345";
char str3[100] = "\0ddddd";
char str4[100] = " 0 z ";
ck_assert_ptr_eq(s21_strchr(str2, '5'), strchr(str2, '5'));
ck_assert_ptr_eq(s21_strchr(str2, '1'), strchr(str2, '1'));
ck_assert_ptr_eq(s21_strchr(str1, '0'), strchr(str1, '0'));
ck_assert_ptr_eq(s21_strchr(str1, '\0'), strchr(str1, '\0'));
ck_assert_ptr_eq(s21_strchr(str4, ' '), strchr(str4, ' '));
ck_assert_ptr_eq(s21_strchr(str3, '\0'), strchr(str3, '\0'));

#test test_s21_strcmp
ck_assert_int_eq(s21_strcmp("1234567890", "1234567890"),
                   strcmp("1234567890", "1234567890"));
  ck_assert_int_eq(s21_strcmp("", ""), strcmp("", ""));
  ck_assert_int_eq(s21_strcmp("13", "12"), strcmp("13", "12"));
  ck_assert_int_eq(s21_strcmp("12", "13"), strcmp("12", "13"));

#test test_s21_strncmp
char str1[100] = "1234", str2[100] = "4321";
  char str3[100] = "1234567890", str4[100] = "qwertyuiop";
  char str5[100] = "1234567890";
  int d, d2;
  d = s21_strncmp(str3, str5, 10);
  d2 = strncmp(str3, str5, 10);
  ck_assert_int_eq(d, d2);
  d = s21_strncmp(str3, str5, 5);
  d2 = strncmp(str3, str5, 5);
  ck_assert_int_eq(d, d2);

#test test_s21_strcpy
char src[1024] = "first\0second";
char dst[1024] = "";
char dest[1024] = "second";
ck_assert_str_eq(s21_strcpy(dst, src), strcpy(dst, src));
ck_assert_str_eq(s21_strcpy(dest, src), strcpy(dest, src));
ck_assert_str_eq(s21_strcpy(dst, "first"), strcpy(dst, "first"));
ck_assert_str_eq(s21_strcpy(dst, ""), strcpy(dst, ""));

#test test_s21_strncpy
char str1[] = "Hello, World!";
char str2[10] = "";
char str3[11] = "firstsecond";
ck_assert_str_eq(s21_strncpy(str2, str1, 8), strncpy(str2, str1, 8));
ck_assert_str_eq(s21_strncpy(str3, str1, 1), strncpy(str3, str1, 1));
ck_assert_str_eq(s21_strncpy(str2, str3, 1), strncpy(str2, str3, 1));
ck_assert_str_eq(s21_strncpy(str2, str3, 10), strncpy(str2, str3, 10));

#test test_s21_strcspn
ck_assert_int_eq(strcspn("012346789","9876"), s21_strcspn("012346789","9876"));
ck_assert_int_eq(strcspn("0123",""), s21_strcspn("0123",""));
ck_assert_int_eq(strcspn("0123","9"), s21_strcspn("0123","9"));
ck_assert_int_eq(strcspn("",""), s21_strcspn("",""));
ck_assert_int_eq(strcspn("987","789"), s21_strcspn("987","789"));
ck_assert_int_eq(strcspn("0123","7893"), s21_strcspn("0123","7893"));

#test test_s21_strerror
ck_assert_str_eq(strerror(-1), s21_strerror(-1));
ck_assert_str_eq(strerror(0), s21_strerror(0));
ck_assert_str_eq(strerror(55), s21_strerror(55));
ck_assert_str_eq(strerror(0123), s21_strerror(0123));
ck_assert_str_eq(strerror(0-123), s21_strerror(0-123));
ck_assert_str_eq(strerror(134), s21_strerror(134));
ck_assert_str_eq(strerror(2*50), s21_strerror(2*50));
ck_assert_str_eq(strerror(150), s21_strerror(150));

#test test_s21_strlen
char *str = "1234";
char b[20]={'P','r','o','g','r','a','m','\0'};
ck_assert_int_eq(strlen("Hello"), s21_strlen("Hello"));
ck_assert_int_eq(strlen(""), s21_strlen(""));
ck_assert_int_eq(strlen("Hello, World!"), s21_strlen("Hello, World!"));
ck_assert_int_eq(strlen("\0Hello"), s21_strlen("\0Hello"));
ck_assert_int_eq(strlen("hello\0world"), s21_strlen("hello\0world"));
ck_assert_int_eq(strlen("hello\0\0"), s21_strlen("hello\0\0"));
ck_assert_int_eq(strlen(str), s21_strlen(str));
ck_assert_int_eq(strlen(b), s21_strlen(b));

#test test_s21_strpbrk
char str[11]="0123456789";
char sym[10]="469";
ck_assert_ptr_eq(strpbrk(str,sym), s21_strpbrk (str,sym));
ck_assert_ptr_eq(strpbrk(str,""), s21_strpbrk (str,""));
ck_assert_ptr_eq(strpbrk("",""), s21_strpbrk ("",""));
ck_assert_ptr_eq(strpbrk("569",sym), s21_strpbrk ("569",sym));
ck_assert_ptr_eq(strpbrk(sym,sym), s21_strpbrk (sym,sym));

#test test_s21_strrchr
char str [11]="12456789";
ck_assert_ptr_eq(strrchr (str,'6'), s21_strrchr (str,'6'));
ck_assert_ptr_eq(strrchr (str,'\0'), s21_strrchr (str,'\0'));
ck_assert_ptr_eq(strrchr ("",' '), s21_strrchr ("",' '));
ck_assert_ptr_eq(strrchr (str,26), s21_strrchr (str,26));
ck_assert_ptr_eq(strrchr (str,54), s21_strrchr (str,54));

#test test_s21_strspn
ck_assert_int_eq(strspn("012345","210"), s21_strspn("012345","210"));
ck_assert_int_eq(strspn("012"," "), s21_strspn("012"," "));
ck_assert_int_eq(strspn("012","789"), s21_strspn("012","789"));
ck_assert_int_eq(strspn(" "," "), s21_strspn(" "," "));
ck_assert_int_eq(strspn("12345","123\04"), s21_strspn("12345","123\04"));

#test test_s21_strstr
char str1 [11]="0123456789";
char str2 [10]="345";
ck_assert_ptr_eq(strstr (str1,str2), s21_strstr (str1,str2));
ck_assert_ptr_eq(strstr (str1," "), s21_strstr (str1," "));
ck_assert_ptr_eq(strstr (str1,"23\03"), s21_strstr (str1,"23\03"));
ck_assert_ptr_eq(strstr (str1,"23\0"), s21_strstr (str1,"23\0"));
ck_assert_ptr_eq(strstr (str1,"\0"), s21_strstr (str1,"\0"));

#test test_s21_strtok
char str[24]= " test1/test2/test3/test4";
char str1[24]= " test\ttest\ttest\ttest\t";
char sep[10] = "/";
ck_assert_ptr_eq(strtok (str,sep), s21_strtok (str,sep));
ck_assert_ptr_eq(strtok (str,"1"), s21_strtok (str,"1"));
ck_assert_ptr_eq(strtok (str," "), s21_strtok(str," "));
ck_assert_ptr_eq(strtok (str1,"\t"), s21_strtok(str1,"\t"));

#test test_s21_to_upper
char *test1 = s21_to_upper("hello");
char *test2 = "HELLO";
char *test3 = s21_to_upper("WORLD");
char *test4 = "WORLD";
char *test5 = s21_to_upper("hElLoWoRlD");
char *test6 = "HELLOWORLD";
char *test7 = s21_to_upper("");
char *test8 = "";
char *test9 = s21_to_upper("HeLlO123WoRlD");
char *test10 = "HELLO123WORLD";
ck_assert_str_eq(test1, test2);
ck_assert_str_eq(test3, test4);
ck_assert_str_eq(test5, test6);
ck_assert_str_eq(test7, test8);
ck_assert_str_eq(test9, test10);
free(test1);
free(test3);
free(test5);
free(test9);

#test test_s21_to_lower
char *test1 = s21_to_lower("HELLO");
char *test2 = "hello";
char *test3 = s21_to_lower("world");
char *test4 = "world";
char *test5 = s21_to_lower("hElLoWoRlD");
char *test6 = "helloworld";
char *test7 = s21_to_lower("");
char *test8 = "";
char *test9 = s21_to_lower("HeLlO123WoRlD");
char *test10 = "hello123world";
ck_assert_str_eq(test1, test2);
ck_assert_str_eq(test3, test4);
ck_assert_str_eq(test5, test6);
ck_assert_str_eq(test7, test8);
ck_assert_str_eq(test9, test10);
free(test1);
free(test3);
free(test5);
free(test9);

#test test_s21_insert
char *test1 = s21_insert("HELLO", "new", 2);
char *test2 = "HEnewLLO";
char *test3 = s21_insert("world", "228", 3);
char *test4 = "wor228ld";
char *test5 = s21_insert("", "hi", 3);
char *test6 = NULL;
char *test7 = s21_insert("1", "lol", 1);
char *test8 = "1lol";
char *test9 = s21_insert("1", "school", 0);
char *test10 = "school1";
ck_assert_str_eq(test1, test2);
ck_assert_str_eq(test3, test4);
fail_unless(test5 == test6);
ck_assert_str_eq(test7, test8);
ck_assert_str_eq(test9, test10);
free(test1);
free(test3);
free(test5);
free(test7);
free(test9);

#test test_s21_trim
char *test1 = s21_trim("HELLO", "H");
char *test2 = "ELLO";
char *test3 = s21_trim("world", "rd");
char *test4 = "worl";
char *test5 = s21_trim("", "hi");
char *test6 = "";
char *test7 = s21_trim("1", "lol");
char *test8 = "1";
char *test9 = s21_trim("1234", "14");
char *test10 = "23";
ck_assert_str_eq(test1, test2);
ck_assert_str_eq(test3, test4);
ck_assert_str_eq(test5, test6);
ck_assert_str_eq(test7, test8);
ck_assert_str_eq(test9, test10);
free(test1);
free(test3);
free(test5);
free(test7);
free(test9);


#test test_s21_sprintf_s_string
sprintf(array1, "%s", "Hello");
s21_sprintf(array2, "%s", "Hello");
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

sprintf(array1, "%.1s", "Hello");
s21_sprintf(array2, "%.1s", "Hello");
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

sprintf(array1, "%7s", "Hello");
s21_sprintf(array2, "%7s", "Hello");
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

sprintf(array1, "%-10s", "Hello");
s21_sprintf(array2, "%-10s", "Hello");
ck_assert_str_eq(array1, array2);
free_array(array1, array2);



#test test_s21_sprintf_c_string
sprintf(array1, "%1c %c", 'H', 'z');
s21_sprintf(array2, "%1c %c", 'H', 'z');
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

sprintf(array1, "%10c %2c", 'H', 'z');
s21_sprintf(array2, "%10c %2c", 'H', 'z');
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

sprintf(array1, "%-1c %-c", 'H', 'z');
s21_sprintf(array2, "%-1c %-c", 'H', 'z');
ck_assert_str_eq(array1, array2);
free_array(array1, array2);



#test test_s21_sprintf_f_string
sprintf(array1, "%f", 100000.4);
s21_sprintf(array2, "%f", 100000.4);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

sprintf(array1, "%0f", 100000.4);
s21_sprintf(array2, "%0f", 100000.4);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

sprintf(array1, "%f", -100000.4);
s21_sprintf(array2, "%f", -100000.4);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

sprintf(array1, "%+f %+f", -100000.4, 1000.231);
s21_sprintf(array2, "%+f %+f", -100000.4, 1000.231);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

sprintf(array1, "%-20f", 100000.4);
s21_sprintf(array2, "%-20f", 100000.4);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

sprintf(array1, "%+20f", 100000.4);
s21_sprintf(array2, "%+20f", 100000.4);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

sprintf(array1, "%+20f", 100000.4);
s21_sprintf(array2, "%+20f", 100000.4);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);



sprintf(array1, "%+20f", -100000.4);
s21_sprintf(array2, "%+20f", -100000.4);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);


float key = 10000;
sprintf(array1, "%+20f", key);
s21_sprintf(array2, "%+20f", key);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);



#test test_s21_sprintf_d_string
sprintf(array1, "%d%%\n", 4);
s21_sprintf(array2, "%d%%\n", 4);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

sprintf(array1, "%.10d%%\n", 4);
s21_sprintf(array2, "%.10d%%\n", 4);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

sprintf(array1, "%0d%%\n", -4);
s21_sprintf(array2, "%0d%%\n", -4);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

sprintf(array1, "%-10d%%\n", -4);
s21_sprintf(array2, "%-10d%%\n", -4);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

sprintf(array1, "%+10d%%\n", 4);
s21_sprintf(array2, "%+10d%%\n", 4);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

sprintf(array1, "%+10d%%\n", -4);
s21_sprintf(array2, "%+10d%%\n", -4);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

sprintf(array1, "%+10.5d%%\n", -4);
s21_sprintf(array2, "%+10.5d%%\n", -4);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

long int var_long = 100;
sprintf(array1, "%ld%%\n", var_long);
s21_sprintf(array2, "%ld%%\n", var_long);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

short var_short = 123;
sprintf(array1, "%hd%%\n", var_short);
s21_sprintf(array2, "%hd%%\n", var_short);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

sprintf(array1, "%10.5u%%\n", 4);
s21_sprintf(array2, "%10.5u%%\n", 4);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

sprintf(array1, "%-10u%%\n", 421);
s21_sprintf(array2, "%-10u%%\n", 421);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

short unsigned key_h = 421;
sprintf(array1, "%-10hu%%\n", key_h);
s21_sprintf(array2, "%-10hu%%\n", key_h);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);

long unsigned key_l = 421;
sprintf(array1, "%-10lu%%\n", key_l);
s21_sprintf(array2, "%-10lu%%\n", key_l);
ck_assert_str_eq(array1, array2);
free_array(array1, array2);



#test sprintf_simple_int
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];
char *format = "This is a simple value %d";
int val = 69;
ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));
ck_assert_str_eq(str1, str2);

#test sprintf_precise_int
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];
char *format = "%.5i";
int val = 69;
ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));
ck_assert_str_eq(str1, str2);

#test sprintf_width_int
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];
char *format = "%5d";
int val = 69;
ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));
ck_assert_str_eq(str1, str2);

#test sprintf_minus_width_int
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];
char *format = "%-5i";
int val = 69;
ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));
ck_assert_str_eq(str1, str2);

#test sprintf_plus_width_int
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];
char *format = "%+12d";
int val = 69;
ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));
ck_assert_str_eq(str1, str2);

#test sprintf_padding_int
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];
char *format = "%012i";
int val = 69;
ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));
ck_assert_str_eq(str1, str2);

#test sprintf_star_width_int
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];
char *format = "%0*d";
int val = 69;
ck_assert_int_eq(s21_sprintf(str1, format, 5, val), sprintf(str2, format, 5, val));
ck_assert_str_eq(str1, str2);

#test sprintf_star_precision_int
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];
char *format = "%0.*i";
int val = 69;
ck_assert_int_eq(s21_sprintf(str1, format, 5, val), sprintf(str2, format, 5, val));
ck_assert_str_eq(str1, str2);

#test sprintf_many_flags_many_ints
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];
char format[] = "%0.*i %d %4.*i %013d %d";
int val = 69;
ck_assert_int_eq(
s21_sprintf(str1, format, 5, val, -10431, 13, 5311, 0, -581813581),
sprintf(str2, format, 5, val, -10431, 13, 5311, 0, -581813581));
ck_assert_str_eq(str1, str2);

#test sprintf_flags_long_int
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];
char *format = "%+5.31li";
long int val = 698518581899;
ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));
ck_assert_str_eq(str1, str2);

#test sprintf_flags_short_int
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];
char *format = "%-16.9hi";
short int val = 6958;
ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));
ck_assert_str_eq(str1, str2);

#test sprintf_flags_another_long_int
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];
char *format = "%0.*ld";
long val = 8581385185;
ck_assert_int_eq(s21_sprintf(str1, format, 5, val), sprintf(str2, format, 5, val));
ck_assert_str_eq(str1, str2);


#test sprintf_space_flag_int
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "% d";
    int val = 0;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_unsigned_val
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%u";
    unsigned int val = 14140;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_unsigned_val_width
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%15u";
    unsigned int val = 14140;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_unsigned_val_flags
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%-16u";
    unsigned int val = 14140;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_unsigned_val_precision
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%.51u";
    unsigned int val = 14140;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_unsigned_val_many_flags
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "% 5.51u";
    unsigned int val = 14140;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_unsigned_val_short
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%hu";
    unsigned short int val = 14140;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_unsigned_val_long
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%lu";
    unsigned long int val = 949149114140;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_unsigned_val_many
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%lu, %u, %hu, %.5u, %5.u";
    unsigned long int val = 949149114140;
    ck_assert_int_eq(s21_sprintf(str1, format, val, 14, 1441, 14414, 9681), sprintf(str2, format, val, (unsigned)14,
                             (unsigned short)1441, (unsigned)14414,
                             (unsigned)9681));

    ck_assert_str_eq(str1, str2);

#test sprintf_octal_width
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%15o";
    int val = 14140;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_octal_flags
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%-16o";
    int val = 14140;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_octal_precision
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%.51o";
    int val = 14140;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_octal_many_flags
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%-5.51o";
    int val = 14140;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_octal_zero
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%o";
    ck_assert_int_eq(s21_sprintf(str1, format, 0), sprintf(str2, format, 0));

    ck_assert_str_eq(str1, str2);

#test sprintf_octal_hash
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%#o";
    int val = 57175;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_octal_short
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%hd";
    short int val = 14140;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);


#test sprintf_unsigned_zero
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%u";
    ck_assert_int_eq(s21_sprintf(str1, format, 0), sprintf(str2, format, (unsigned)0));

    ck_assert_str_eq(str1, str2);

#test sprintf_hex_width
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%5x";
    unsigned val = 858158158;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);


#test sprintf_hex_precision
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%.15x";
    unsigned val = 858158158;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf_hex_one_longer_width
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%#2x";
    unsigned val = 1;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_hex_two_longer_width
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%#30x";
    unsigned val = 1;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_one_char
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%c";
    char val = 'X';
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);
#test sprintf_one_precision
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%.5c";
    char val = 'c';
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf_one_width
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%15c";
    char val = 'c';
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_one_many
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%-5.3c%c%c%c%c Hello! ABOBA";
    char val = 'c';
    ck_assert_int_eq(s21_sprintf(str1, format, val, 'c', 'a', 'b', 'b'), sprintf(str2, format, val, 'c', 'a', 'b', 'b'));

    ck_assert_str_eq(str1, str2);

#test sprintf_one_many_flags
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%-5.3c";
    char val = 'c';
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_string
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%s";
    char *val = "I LOVE STRINGS AND TESTS AND SCHOOL21 NO JOKE";
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_string_precision
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%.15s";
    char *val = "I LOVE STRINGS AND TESTS AND SCHOOL21 NO JOKE";
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_string_width
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%15s";
    char *val = "69 IS MY FAVORITE NUMBER";
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_string_flags
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%-15.9s";
    char *val = "69 IS MY FAVORITE NUMBER";
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_string_long
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%s";
    char *val =
        "69 IS MY FAVORITE NUMBER THIS IS SUPPOSED TO BE A VERY LONG STRING";
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_string_many
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "%s%s%s%s";
    char *val =
        "69 IS MY FAVORITE NUMBER THIS IS SUPPOSED TO BE A VERY LONG STRING";
    char *s1 = "";
    char *s2 = "87418347813748913749871389480913";
    char *s3 = "HAHAABOBASUCKER";
    ck_assert_int_eq(s21_sprintf(str1, format, val, s1, s2, s3), sprintf(str2, format, val, s1, s2, s3));

    ck_assert_str_eq(str1, str2);


#test sprintf_string_width_huge
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char *val = "kjafdiuhfjahfjdahf";
    char *format = "%120s";
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_n_specifier
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    int ret = 0;
    char *format = "Hello, my sexy little aboba abobushka abobina %n";
    ck_assert_int_eq(s21_sprintf(str1, format, &ret), sprintf(str2, format, &ret));

    ck_assert_str_eq(str1, str2);

#test sprintf_float_precision
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char *format = "%Lf";
    long double val = 513515.131513515151351;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_float_width
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char *format = "%10Lf";
    long double val = 15.35;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_float_precision_zero
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char *format = "%.0Lf";
    long double val = 15.35;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_float_precision_empty
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char *format = "%.Lf";
    long double val = 15.35;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_float_precision_huge
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char *format = "%.15Lf";
    long double val = 15.35;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);

#test sprintf_float_precision_huge_negative
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char *format = "%.15Lf";
    long double val = -15.35581134;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);


#test sprintf_float_flags
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char *format = "% f";
    float val = 0;
    ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);


#test sprintf_all_empty
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    ck_assert_int_eq(s21_sprintf(str1, "abc"), sprintf(str2, "abc"));

    ck_assert_str_eq(str1, str2);

#test sprintf_empty_format_and_parameters
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(s21_sprintf(str1, "abc"), sprintf(str2, "abc"));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_one_char
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%c", '\t'), sprintf(str2, "%c", '\t'));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_many_char
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%c%c%c%c%c", '\t', '\n', '0', 'S', 's'), sprintf(str2, "%c%c%c%c%c", '\t', '\n', '0', 'S', 's'));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_one_string
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%s", "Drop Sega PLS"), sprintf(str2, "%s", "Drop Sega PLS"));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_many_string
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(
        s21_sprintf(str1, "%s%s%s%s%s", "Drop", " ", "Sega", " ", "PLS"),
        sprintf(str2, "%s%s%s%s%s", "Drop", " ", "Sega", " ", "PLS"));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_one_dec
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%d", 666), sprintf(str2, "%d", 666));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_many_dec
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%d%d%d%d", -999, 0, 666, -100), sprintf(str2, "%d%d%d%d", -999, 0, 666, -100));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_one_int
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%i", -0), sprintf(str2, "%i", -0));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_many_int
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%i%i%i%i", -999, 0, 666, -100), sprintf(str2, "%i%i%i%i", -999, 0, 666, -100));

    ck_assert_str_eq(str1, str2);



#test sprintf_test_one_unsigned_dec
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    ck_assert_int_eq(s21_sprintf(str1, "%u", 100), sprintf(str2, "%u", (unsigned)100));
    ck_assert_str_eq(str1, str2);

#test sprintf_test_many_unsigned_dec
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%u%u%u%u", 999, 0, 666, 100), sprintf(str2, "%u%u%u%u", (unsigned)999, (unsigned)0,
                             (unsigned)666, (unsigned)100));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_one_char_with_alignment_left
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%8c", '\t'), sprintf(str2, "%8c", '\t'));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_one_char_with_alignment_right
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%-8c", '\t'), sprintf(str2, "%-8c", '\t'));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_many_char_with_alignment
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(
        s21_sprintf(str1, "%3c%-11c%10c%-2c%c", '\t', '\n', '0', 'S', 's'),
        sprintf(str2, "%3c%-11c%10c%-2c%c", '\t', '\n', '0', 'S', 's'));

    ck_assert_str_eq(str1, str2);

// START HEX TEST
#test sprintf_test_one_hex_lower
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    ck_assert_int_eq(s21_sprintf(str1, "%x", (unsigned)INT32_MIN), sprintf(str2, "%x", (unsigned)INT32_MIN));
    ck_assert_str_eq(str1, str2);
    ck_assert_int_eq(s21_sprintf(str1, "%x", 0), sprintf(str2, "%x", 0));
    ck_assert_str_eq(str1, str2);
    ck_assert_int_eq(s21_sprintf(str1, "%x", INT32_MAX), sprintf(str2, "%x", INT32_MAX));
    ck_assert_str_eq(str1, str2);

#test sprintf_test_one_hex_upper
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%X", (unsigned)INT32_MIN), sprintf(str2, "%X", (unsigned)INT32_MIN));
    ck_assert_str_eq(str1, str2);
    ck_assert_int_eq(s21_sprintf(str1, "%X", 0), sprintf(str2, "%x", 0));
    ck_assert_str_eq(str1, str2);
    ck_assert_int_eq(s21_sprintf(str1, "%X", INT32_MAX), sprintf(str2, "%X", INT32_MAX));
    ck_assert_str_eq(str1, str2);

#test sprintf_test_many_hex_lower
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(
        s21_sprintf(str1, "%x%x%x%x%x", 12340987, 135, 0, -1230, -123213123),
        sprintf(str2, "%x%x%x%x%x", 12340987, 135, 0, -1230, -123213123));
    ck_assert_str_eq(str1, str2);

#test sprintf_test_many_hex_upper
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(
        s21_sprintf(str1, "%X%X%X%X%X", 12340987, 135, 0, -1230, -123213123),
        sprintf(str2, "%X%X%X%X%X", 12340987, 135, 0, -1230, -123213123));
    ck_assert_str_eq(str1, str2);
// END HEX TEST


#test sprintf_test_one_hex_upper_with_alignment_right
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%7X", (unsigned)INT32_MIN), sprintf(str2, "%7X", (unsigned)INT32_MIN));
    ck_assert_str_eq(str1, str2);
    ck_assert_int_eq(s21_sprintf(str1, "%7X", INT32_MAX), sprintf(str2, "%7X", INT32_MAX));
    ck_assert_str_eq(str1, str2);




#test sprintf_test_one_hex_with_hashtag
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%#x", INT32_MIN), sprintf(str2, "%#x", (unsigned)INT32_MIN));
    ck_assert_str_eq(str1, str2);
    ck_assert_int_eq(s21_sprintf(str1, "%#x", 0), sprintf(str2, "%#x", 0));
    ck_assert_str_eq(str1, str2);
    ck_assert_int_eq(s21_sprintf(str1, "%#x", INT32_MAX), sprintf(str2, "%#x", INT32_MAX));
    ck_assert_str_eq(str1, str2);

#test sprintf_test_one_hex_upper_with_hashtag
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%#X", INT32_MIN), sprintf(str2, "%#X", (unsigned)INT32_MIN));
    ck_assert_str_eq(str1, str2);
    ck_assert_int_eq(s21_sprintf(str1, "%#X", 0), sprintf(str2, "%#X", 0));
    ck_assert_str_eq(str1, str2);
    ck_assert_int_eq(s21_sprintf(str1, "%#X", INT32_MAX), sprintf(str2, "%#X", INT32_MAX));
    ck_assert_str_eq(str1, str2);



// END HEX TEST WITH #

// START HEX TEST with width *
#test sprintf_test_one_hex_lower_with_width_star
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%*x", 11, INT32_MIN), sprintf(str2, "%*x", 11, (unsigned)INT32_MIN));
    ck_assert_str_eq(str1, str2);

    ck_assert_int_eq(s21_sprintf(str1, "%*x", 11, INT32_MAX), sprintf(str2, "%*x", 11, INT32_MAX));
    ck_assert_str_eq(str1, str2);

#test sprintf_test_one_hex_upper_with_width_star
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%*X", 11, INT32_MIN), sprintf(str2, "%*X", 11, (unsigned)INT32_MIN));
    ck_assert_str_eq(str1, str2);

    ck_assert_int_eq(s21_sprintf(str1, "%*X", 11, INT32_MAX), sprintf(str2, "%*X", 11, INT32_MAX));
    ck_assert_str_eq(str1, str2);

#test sprintf_test_many_hex_lower_with_width_star_and_align_and_hashtag
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%#*x%*x%-12x%3x%*x", 9, 127312897, 0,
                                 -1, 199, -123978, 3, -1251), sprintf(str2, "%#*x%*x%-12x%3x%*x", 9, 127312897, -0, -1,
                             199, -123978, 3, -1251));
    ck_assert_str_eq(str1, str2);

#test sprintf_test_many_hex_upper_with_width_star
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%#*X%*X%-12X%3X%*X", 9, 127312897, 0,
                                 -1, 199, -123978, 3, -1251), sprintf(str2, "%#*X%*X%-12X%3X%*X", 9, 127312897, 0, -1,
                             199, -123978, 3, -1251));
    ck_assert_str_eq(str1, str2);
// END HEX TEST WITH Width *

// START HEX TEST WITH precision

#test sprintf_test_one_hex_upper_with_precision
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    int a = s21_sprintf(str1, "%*.6X", 11, INT32_MIN);
    int b = sprintf(str2, "%*.6X", 11, (unsigned)INT32_MIN);
    ck_assert_int_eq(a, b);
    ck_assert_str_eq(str1, str2);

// END HEX TEST WITH precision

// START HEX TEST WITH Length
#test sprintf_test_one_hex_lower_with_length
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%hx", 0), sprintf(str2, "%hx", (unsigned short)0));
    ck_assert_str_eq(str1, str2);
    ck_assert_int_eq(s21_sprintf(str1, "%hx", 11), sprintf(str2, "%hx", (unsigned short)11));
    ck_assert_str_eq(str1, str2);
    long unsigned int val = INT32_MAX;
    ck_assert_int_eq(s21_sprintf(str1, "%lx", val), sprintf(str2, "%lx", val));
    ck_assert_str_eq(str1, str2);
    long unsigned int v = 0;
    ck_assert_int_eq(s21_sprintf(str1, "%lx", v), sprintf(str2, "%lx", v));
    ck_assert_str_eq(str1, str2);

#test sprintf_test_one_hex_upper_with_length
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    ck_assert_int_eq(s21_sprintf(str1, "%hx", 0), sprintf(str2, "%hx", (unsigned short)0));
    ck_assert_str_eq(str1, str2);
    ck_assert_int_eq(s21_sprintf(str1, "%hx", 11), sprintf(str2, "%hx", (unsigned short)11));
    ck_assert_str_eq(str1, str2);
    long unsigned int val = INT32_MAX;
    ck_assert_int_eq(s21_sprintf(str1, "%lx", val), sprintf(str2, "%lx", val));
    ck_assert_str_eq(str1, str2);
    long unsigned int v = 0;
    ck_assert_int_eq(s21_sprintf(str1, "%lx", v), sprintf(str2, "%lx", v));
    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf1
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%10ld";

    ck_assert_int_eq(s21_sprintf(str1, format, 1), sprintf(str2, format, 1));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf2
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%1.1f";

    ck_assert_int_eq(s21_sprintf(str1, format, 1.1), sprintf(str2, format, 1.1));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf3
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%8.3c";

    ck_assert_int_eq(s21_sprintf(str1, format, 'a'), sprintf(str2, format, 'a'));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf4
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%+5.5d aboba";

    int val = 10000;
    int a = s21_sprintf(str1, format, val);
    int b = sprintf(str2, format, val);
    ck_assert_int_eq(a, b);

    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf6
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%7.7f";

    ck_assert_int_eq(s21_sprintf(str1, format, 11.123456), sprintf(str2, format, 11.123456));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf7
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%7.4s";

    ck_assert_int_eq(s21_sprintf(str1, format, "aboba floppa"), sprintf(str2, format, "aboba floppa"));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf8
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%6.6u";

    ck_assert_int_eq(s21_sprintf(str1, format, 12341151), sprintf(str2, format, 12341151));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf9
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%li%ld%lu";

    ck_assert_int_eq(s21_sprintf(str1, format, 666666666666, 777, 111), sprintf(str2, format, 666666666666, 777, 111));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf10
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%hi%hd%hu";

    ck_assert_int_eq(s21_sprintf(str1, format, 666, -777, 111), sprintf(str2, format, 666, -777, 111));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf11
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%+li%+lu%+d%+lf";

    ck_assert_int_eq(s21_sprintf(str1, format, -123, 321, -5555, -1213.123), sprintf(str2, format, -123, 321, -5555, -1213.123));

    ck_assert_str_eq(str1, str2);


#test sprintf_test_sprintf14
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "% 0.0li% 0.0lu% 0.0ld % 0.0lf";

    ck_assert_int_eq(
        s21_sprintf(str1, format, 1, 222, 33333333333, -166513.1232),
        sprintf(str2, format, 1, 222, 33333333333, -166513.1232));

    ck_assert_str_eq(str1, str2);



#test sprintf_test_sprintf16
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "% c";

    ck_assert_int_eq(s21_sprintf(str1, format, 'a'), sprintf(str2, format, 'a'));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf17
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "% s";

    ck_assert_int_eq(s21_sprintf(str1, format, "aboba likes floppa"), sprintf(str2, format, "aboba likes floppa"));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf18
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "% s% c";

    ck_assert_int_eq(s21_sprintf(str1, format, "", 'f'), sprintf(str2, format, "", 'f'));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf19
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%210s";

    ck_assert_int_eq(s21_sprintf(str1, format, "AHHAHAHA\0AHHAHAHAH"), sprintf(str2, format, "AHHAHAHA\0AHHAHAHAH"));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf20
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%-115s";

    ck_assert_int_eq(s21_sprintf(str1, format, "Nick her"), sprintf(str2, format, "Nick her"));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf24
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%+2.1c%+4.2d%+5.4i%+10.2f%+55.55s%+1.1u";

    ck_assert_int_eq(
        s21_sprintf(str1, format, 'f', 21, 42, 666.666,
                    "Lorem ipsum dolor sit amet. Aut quam ducimus.", 11),
        sprintf(str2, format, 'f', 21, 42, 666.666,
                "Lorem ipsum dolor sit amet. Aut quam ducimus.", 11));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf25
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%.f";

    ck_assert_int_eq(s21_sprintf(str1, format, 121.123), sprintf(str2, format, 121.123));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf26
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    s21_sprintf(str1, "%%");
    sprintf(str2, "%%");
    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf27
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%%%%%%%%";
    ck_assert_int_eq(s21_sprintf(str1, "%%%%%%%%"), sprintf(str2, "%%%%%%%%"));
    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf28
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    int n1;
    int n2;
    int a = s21_sprintf(str1, "%d%n", 123, &n1);
    int b = sprintf(str2, "%d%n", 123, &n2);

    ck_assert_int_eq(a, b);
    ck_assert_int_eq(n1, n2);
    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf29
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%-.f";

    ck_assert_int_eq(s21_sprintf(str1, format, 111.111), sprintf(str2, format, 111.111));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf30
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%-.1d";

    ck_assert_int_eq(s21_sprintf(str1, format, 111), sprintf(str2, format, 111));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf31
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%e";
    double x = 111;
    ck_assert_int_eq(s21_sprintf(str1, format, x), sprintf(str2, format, x));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf32
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%e%e%e%e";

    ck_assert_int_eq(
        s21_sprintf(str1, format, 11.111, 222.2222, 666., -555.125),
        sprintf(str2, format, 11.111, 222.2222, 666., -555.125));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf33
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%Le";
    long double x = 122.1231;

    ck_assert_int_eq(s21_sprintf(str1, format, x), sprintf(str2, format, x));

    ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf35
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%.10e";

    ck_assert_int_eq(s21_sprintf(str1, format, 111.184314818), sprintf(str2, format, 111.184314818));

    ck_assert_str_eq(str1, str2);


#test sprintf_test_sprintf37
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%E";

    ck_assert_int_eq(s21_sprintf(str1, format, 0.666666), sprintf(str2, format, 0.666666));

    ck_assert_str_eq(str1, str2);



#test sprintf_test_sprintf39
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%e ABOBA %Lf %Lf %Le";
    long double c = 848181;
    long double a = 0.00000001;
    long double b = 1111111.11;
    ck_assert_int_eq(s21_sprintf(str1, format, 123.123, a, b, c), sprintf(str2, format, 123.123, a, b, c));

    ck_assert_str_eq(str1, str2);




#test sprintf_test_sprintf42
char str1[BUFF_SIZE] = {'\0'};
char str2[BUFF_SIZE] = {'\0'};
char *a;
char b[10];
a = b;
s21_sprintf(str1, "%p", a);
sprintf(str2, "%p", a);
ck_assert_str_eq(str1, str2);

#test sprintf_test_sprintf43
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    char format[] = "%.5o";

    ck_assert_int_eq(s21_sprintf(str1, format, 12345), sprintf(str2, format, 12345));

    ck_assert_str_eq(str1, str2);



#test sprintf_width_char
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];

    char *format = "This is a simple wide char %5c";
    char w = 'c';
    int a = s21_sprintf(str1, format, w);
    int b = sprintf(str2, format, w);
    ck_assert_str_eq(str1, str2);
    ck_assert_int_eq(a, b);


#test sprintf_g_trailing_zero
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];
char format[] = "%g";
double hex = 0.50300;
ck_assert_int_eq(s21_sprintf(str1, format, hex), sprintf(str2, format, hex));

ck_assert_str_eq(str1, str2);

#test sprintf_g_large
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];
char format[] = "%g";
double hex = 5131.43141;
ck_assert_int_eq(s21_sprintf(str1, format, hex), sprintf(str2, format, hex));

ck_assert_str_eq(str1, str2);

#test sprintf_g_small
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];
char format[] = "%g";
double hex = 0.123000;
ck_assert_int_eq(s21_sprintf(str1, format, hex), sprintf(str2, format, hex));

ck_assert_str_eq(str1, str2);

#test sprintf_g_precision
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];
char format[] = "%.5g";
double hex = 0.123000;
ck_assert_int_eq(s21_sprintf(str1, format, hex), sprintf(str2, format, hex));

ck_assert_str_eq(str1, str2);

#test sprintf_test_one_float
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    s21_sprintf(str1, "%f", 0.0001);
    sprintf(str2, "%f", 0.0001);
    ck_assert_str_eq(str1, str2);

#test sprintf_test_many_float
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
        s21_sprintf(str1, "%f%f%f%f", -999.666, 0.0001, 666.999, -100.001);
        sprintf(str2, "%f%f%f%f", -999.666, 0.0001, 666.999, -100.001);
    ck_assert_str_eq(str1, str2);

#test sprintf_str_pres_zero
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];
s21_sprintf(str1, "%10.0s %.0s", "Hello", "World");
sprintf(str2, "%10.0s %.0s", "Hello", "World");
ck_assert_str_eq(str1, str2);










#test sprintf_hex_many
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];

char *format = "%#10x%x%X%#x%#X%5.5x";
unsigned val = 858158158;
ck_assert_int_eq(s21_sprintf(str1, format, val, val, val, val, val, val),
                 sprintf(str2, format, val, val, val, val, val, val));

ck_assert_str_eq(str1, str2);

#test sprintf_hex_many_flags
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];

char *format = "%#5.10x";
unsigned val = 85815;
s21_sprintf(str1, format, val);
sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);

#test sprintf_hex_zero
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];

char *format = "%#x";
unsigned val = 0;
ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

ck_assert_str_eq(str1, str2);

#test sprintf_hex_huge
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];

char *format = "%#x";
unsigned val = 18571;
ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

ck_assert_str_eq(str1, str2);

#test sprintf_hex_short
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];

char *format = "%#hx";
unsigned short val = 12352;
ck_assert_int_eq(s21_sprintf(str1, format, val), sprintf(str2, format, val));

ck_assert_str_eq(str1, str2);

#test sprintf_hex_long
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];

char *format = "%#lx";
unsigned long val = 18571757;
s21_sprintf(str1, format, val);
sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);

#test sprintf_hex_short_reshotka
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];
char *format = "%-10.18lx";
unsigned long val = 5;
s21_sprintf(str1, format, val);
sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);

#test sprintf_hex_allmore
char str1[BUFF_SIZE];
char str2[BUFF_SIZE];
s21_sprintf(str1, "%-10.18X %15.7X %#15.7X %-40.30o", 5, 5, 5, 7);
sprintf(str2, "%-10.18X %15.7X %#15.7X %-40.30o", 5, 5, 5, 7);
ck_assert_str_eq(str1, str2);

#test sprintf_test_one_double
    char str1[BUFF_SIZE];
    char str2[BUFF_SIZE];
    s21_sprintf(str1, "%020.2f", -0.0001);
    sprintf(str2, "%020.2f", -0.0001);
    ck_assert_str_eq(str1, str2);

char arrp_1[256] = "";
char *pt = arrp_1;
  char arrp_3[256] = "";
  char arrp3[256] = "";
  pt = arrp_3;
  s21_sprintf(arrp_3, "%p", pt);
  sprintf(arrp3, "%p", pt);
  ck_assert_str_eq(arrp_3, arrp3);

  char arrp_4[256] = "";
  char arrp4[256] = "";
  pt = arrp_4;
  s21_sprintf(arrp_4, "%-p", pt);
  sprintf(arrp4, "%-p", pt);
  ck_assert_str_eq(arrp_4, arrp4);

  char arrp_6[256] = "";
  char arrp6[256] = "";
  pt = arrp_6;
  s21_sprintf(arrp_6, "%80p", pt);
  sprintf(arrp6, "%80p", pt);
  ck_assert_str_eq(arrp_6, arrp6);

  char arrp_7[256] = "";
  char arrp7[256] = "";
  pt = arrp_7;
  s21_sprintf(arrp_7, "%100p", pt);
  sprintf(arrp7, "%100p", pt);
  ck_assert_str_eq(arrp_7, arrp7);


  char arrp_11[256] = "";
  char arrp11[256] = "";
  s21_sprintf(arrp_11, "%-p", "Hello world");
  sprintf(arrp11, "%-p", "Hello world");
  ck_assert_str_eq(arrp_11, arrp11);

  char arrp_12[256] = "";
  char arrp12[256] = "";
  s21_sprintf(arrp_12, "%10p", "Hello world");
  sprintf(arrp12, "%10p", "Hello world");
  ck_assert_str_eq(arrp_12, arrp12);
